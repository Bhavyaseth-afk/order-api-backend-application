# Generated by Django 4.2.24 on 2025-09-17 14:25

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the order', primary_key=True, serialize=False)),
                ('side', models.IntegerField(choices=[(1, 'Buy'), (-1, 'Sell')], help_text='1 for buy, -1 for sell')),
                ('quantity', models.PositiveIntegerField(help_text='Total quantity to buy/sell')),
                ('price', models.DecimalField(decimal_places=2, help_text='Price per unit', max_digits=10)),
                ('remaining_quantity', models.PositiveIntegerField(help_text='Remaining quantity after partial fills')),
                ('traded_quantity', models.PositiveIntegerField(default=0, help_text='Quantity that has been traded')),
                ('average_traded_price', models.DecimalField(decimal_places=2, default=0, help_text='Average price of traded quantity', max_digits=10)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('ACTIVE', 'Active'), ('PARTIALLY_FILLED', 'Partially Filled'), ('FILLED', 'Filled'), ('CANCELLED', 'Cancelled'), ('REJECTED', 'Rejected')], default='PENDING', help_text='Current status of the order', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the order is still active in the order book')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_id', models.UUIDField(blank=True, help_text='User who placed the order', null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the user', primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('trading_enabled', models.BooleanField(default=True, help_text='Whether the user can place orders')),
                ('max_order_value', models.DecimalField(decimal_places=2, default=1000000.0, help_text='Maximum value for a single order', max_digits=15)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', related_query_name='custom_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', related_query_name='custom_user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Trade',
            fields=[
                ('trade_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the trade', primary_key=True, serialize=False)),
                ('price', models.DecimalField(decimal_places=2, help_text='Execution price', max_digits=10)),
                ('quantity', models.PositiveIntegerField(help_text='Quantity traded')),
                ('execution_timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='When the trade was executed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_settled', models.BooleanField(default=False, help_text='Whether the trade has been settled')),
                ('settlement_timestamp', models.DateTimeField(blank=True, help_text='When the trade was settled', null=True)),
                ('ask_order', models.ForeignKey(help_text='Sell order that participated in the trade', on_delete=django.db.models.deletion.CASCADE, related_name='ask_trades', to='shared.order')),
                ('bid_order', models.ForeignKey(help_text='Buy order that participated in the trade', on_delete=django.db.models.deletion.CASCADE, related_name='bid_trades', to='shared.order')),
            ],
            options={
                'ordering': ['-execution_timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['side', 'price', 'created_at'], name='shared_orde_side_cac2af_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['is_active'], name='shared_orde_is_acti_aa2ecb_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['status'], name='shared_orde_status_fdde7a_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['user_id'], name='shared_orde_user_id_a703d5_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='shared_user_email_55f13c_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active'], name='shared_user_is_acti_66759a_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['trading_enabled'], name='shared_user_trading_81f939_idx'),
        ),
        migrations.AddIndex(
            model_name='trade',
            index=models.Index(fields=['execution_timestamp'], name='shared_trad_executi_7399e1_idx'),
        ),
        migrations.AddIndex(
            model_name='trade',
            index=models.Index(fields=['bid_order'], name='shared_trad_bid_ord_87e13d_idx'),
        ),
        migrations.AddIndex(
            model_name='trade',
            index=models.Index(fields=['ask_order'], name='shared_trad_ask_ord_6cf8d7_idx'),
        ),
        migrations.AddIndex(
            model_name='trade',
            index=models.Index(fields=['is_settled'], name='shared_trad_is_sett_6f4d54_idx'),
        ),
    ]
